{"version":3,"sources":["logo.svg","components/HeaderComponent.js","components/MainComponent.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","handleBlur","field","evt","setState","touched","state","isNavOpen","isModalOpen","username","email","message","toggleNav","bind","toggleModal","handleSubmit","handleInputChange","errors","this","length","test","event","target","value","name","alert","validate","color","dark","expand","className","id","src","height","width","alt","onClick","isOpen","navbar","to","style","outline","toggle","onSubmit","method","action","htmlFor","type","innerRef","input","onChange","valid","invalid","onBlur","required","Component","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d13c5c83.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {Component} from 'react';\nimport { Navbar, NavLink, Jumbotron, Nav, NavbarToggler, Collapse, NavItem, Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Input, Label, FormFeedback} from 'reactstrap';\nimport { CodeSlash, Award, Briefcase, Inbox } from 'react-bootstrap-icons';\n\nclass Header extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            isNavOpen: false,\n            isModalOpen: false,\n            username: '',\n            email: '',\n            message: '',\n            touched: {\n                username: false,\n                email: false,\n                message: false,\n            }\n        }\n\n        this.toggleNav = this.toggleNav.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n    }\n\n    handleBlur = (field) => (evt) => {\n        this.setState({\n            touched: { ...this.state.touched, [field]: true }\n        });\n    }\n\n    validate(username, email, message) {\n\n        const errors = {\n            username: '',\n            email: '',\n            message: ''\n        };\n\n        if (this.state.touched.username && username.length < 2)\n            errors.username = 'Your name is too short!';\n        else if (this.state.touched.username && username.length > 16)\n            errors.username = 'Your name is too long!';\n\n        if (this.state.touched.message && message.length < 10)\n            errors.message = 'Please introduce a longer message.';\n        else if (this.state.touched.message && message.length > 150)\n            errors.message = 'Your message is too long!';\n\n        const reg = /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/;\n        if (this.state.touched.email && !reg.test(email))\n            errors.email = 'Your email is not valid.';\n        \n\n        return errors;\n    }\n\n    handleInputChange(event) {\n\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n    \n        this.setState({\n          [name]: value\n        });\n    }\n\n    toggleNav(){\n        this.setState({\n            isNavOpen: !this.state.isNavOpen\n        });\n        \n    }\n\n    toggleModal(){\n        this.setState({\n            isModalOpen: !this.state.isModalOpen\n        });\n    }\n\n    handleSubmit(){\n        this.toggleModal();\n        alert(\"Thank you for your feedback \"+ this.username.value);\n        \n    }\n\n    render(){\n\n        const errors = this.validate(this.state.username, this.state.email, this.state.message);\n        return(\n            <>  \n                <Navbar color=\"dark\" dark expand=\"md\">\n                    <div className=\"container\">\n\n                        <div className=\"container\">\n                            <div className=\"row justify-content-center\">\n                                <div className=\"\">\n                                    <img id=\"logo\" src=\"/myportfolio/assets/images/logo.png\" height=\"90\" width=\"397\" alt=\"Aridai Santana Front-End Developer\"/>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <NavbarToggler onClick={this.toggleNav} />\n                                    <Collapse isOpen={this.state.isNavOpen} navbar> \n                                        <Nav navbar>\n                                            <NavItem>\n                                                <NavLink className=\"nav-link\" to=\"#portfolio\">\n                                                    <Briefcase /> Portfolio\n                                                </NavLink>\n                                            </NavItem>\n                                            <NavItem>\n                                                <NavLink className=\"nav-link\" to=\"#education\">\n                                                    <Award /> Education\n                                                </NavLink>\n                                            </NavItem>\n                                            <NavItem>\n                                                <NavLink className=\"nav-link\" to=\"#skillset\">\n                                                    <CodeSlash /> Skill Set\n                                                </NavLink>\n                                            </NavItem>\n                                        </Nav>\n                                        <Nav className=\"ml-auto\" navbar>\n                                            <NavItem>\n                                                <Button style={{color: '#98fa94'}} outline onClick={this.toggleModal}>\n                                                    <Inbox /> Contact me\n                                                </Button>\n                                            </NavItem>\n                                        </Nav>\n                                    </Collapse>\n                            </div>\n                        </div>\n                    </div>\n                </Navbar>\n                <Jumbotron>\n                    <div className=\"container\">\n                        <div className=\"row row-header\">\n                            <div className=\"col-12 col-sm-6\">\n                                <h1>Welcome to my portfolio.</h1>\n                                <p style={{color: '#98fa94'}}>Here you will find part of my work as Front-End developer.</p>\n\n                            </div>\n                        </div>\n                    </div>\n                </Jumbotron>\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Contact me</ModalHeader>\n                    <ModalBody>\n                       <Form onSubmit={this.handleSubmit} method=\"post\" action=\"/\">\n                           <FormGroup>\n                               <Label htmlFor=\"username\">Name</Label>\n                               <Input type=\"text\" id=\"username\" name=\"username\" innerRef={(input) => this.username = input} \n                                onChange={this.handleInputChange}\n                                valid={errors.username === ''}\n                                invalid={errors.username !== ''}\n                                onBlur={this.handleBlur('username')}\n                                value={this.state.username}\n                                required/>\n                                <FormFeedback>{errors.username}</FormFeedback>\n                           </FormGroup>\n                           <FormGroup>\n                               <Label htmlFor=\"email\">Email</Label>\n                               <Input type=\"email\" id=\"email\" name=\"email\" innerRef={(input) => this.email = input}\n                                onChange={this.handleInputChange}\n                                valid={errors.email === ''}\n                                invalid={errors.email !== ''}\n                                onBlur={this.handleBlur('email')}\n                                value={this.state.email}\n                                required/>\n                                <FormFeedback>{errors.email}</FormFeedback>\n                           </FormGroup>\n                           <FormGroup>\n                               <Label htmlFor=\"message\">Message</Label>\n                               <Input type=\"textarea\" id=\"message\" name=\"message\" innerRef={(input) => this.message = input} \n                                onChange={this.handleInputChange}\n                                valid={errors.message === ''}\n                                invalid={errors.message !== ''}\n                                onBlur={this.handleBlur('message')}\n                                value={this.state.message} \n                                required/>\n                                <FormFeedback>{errors.message}</FormFeedback>\n                           </FormGroup>\n                           <FormGroup >\n                                <Button type=\"submit\" name=\"submit\" color=\"primary\">Submit</Button>\n                           </FormGroup>\n                       </Form>\n                    </ModalBody>\n                </Modal>\n            </>\n        );\n    }\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport Header from './HeaderComponent';\n\nclass Main extends Component{\n\n    constructor(props){\n        super(props);\n\n    }\n\n    render(){\n\n        return(\n            <div>\n                <Header />\n            </div>\n        );\n    }\n}\n\nexport default Main;","import logo from './logo.svg';\nimport './App.css';\nimport Main from './components/MainComponent';\n\nfunction App() {\n  return (\n    <div>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}